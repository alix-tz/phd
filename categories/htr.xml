<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="https://alix-tz.github.io/phd/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A research (b)log (Posts about HTR)</title><link>https://alix-tz.github.io/phd/</link><description></description><atom:link href="https://alix-tz.github.io/phd/categories/htr.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="https://alix-tz.github.io/phd/"&gt;Alix Chagué&lt;/a&gt; CC-BY</copyright><lastBuildDate>Wed, 14 Aug 2024 19:54:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>018 - The CATMuS Modern dataset #1</title><link>https://alix-tz.github.io/phd/posts/018/</link><dc:creator>Alix Chagué</dc:creator><description>&lt;p&gt;Last week, I attended &lt;a href="https://dh2024.adho.org/"&gt;ADHO's annual conference&lt;/a&gt; in Washington DC. I presented a short paper, co-authored with Floriane Chiffoleau and Hugo Scheithauer, about the documentation we wrote for eScriptorium (I wrote &lt;a href="https://alix-tz.github.io/phd/posts/018/010"&gt;a post&lt;/a&gt; about it last year and you can also find our presentation &lt;a href="https://inria.hal.science/hal-04594142"&gt;here&lt;/a&gt;). I was also a co-author on a long paper presented by Ariane Pinche on the &lt;a href="https://inria.hal.science/hal-04346939"&gt;CATMuS Medieval dataset&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CATMuS, which stands for "Consistent Approach to Transcribing ManuScripts", is a collective initiative and a framework to aggregate ground truth datasets using compatible &lt;a href="https://catmus-guidelines.github.io/"&gt;transcription guidelines&lt;/a&gt; for documents from different period written in romance languages. It started with &lt;a href="https://huggingface.co/datasets/CATMuS/medieval"&gt;CATMuS Medieval&lt;/a&gt;, but since January this year, I have been working on a version of CATMuS for the modern and contemporary period. &lt;/p&gt;
&lt;p&gt;While I should (and will) try to publish a data paper on CATMuS Modern &amp;amp; Contemporary (I'll call it McCatmus from now on), I figured I could start with a series of blog posts here. I want to describe the various steps I followed in order to eventually release &lt;a href="https://huggingface.co/datasets/CATMuS/modern"&gt;a dataset on HuggingFace&lt;/a&gt; and hopefully soon the corresponding transcription model.&lt;/p&gt;
&lt;p&gt;I started working on McCatmus in January, but because of a major personal event (I moved to Canada!), it took seven month of stop-and-go before the release of the V1. This was particularly challenging due to the scale of the project and its technicality (it was hard to get back into McCatmus after several weeks of interruption, which I had to do several times).&lt;/p&gt;
&lt;p&gt;To add to this complexity, McCatmus was also a multi-front operation. Indeed, to create McCatmus, it was necessary to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;define transcription guidelines in collaboration with other data producers,&lt;/li&gt;
&lt;li&gt;identify datasets compatible with the guidelines and set priorities,&lt;/li&gt;
&lt;li&gt;actually make all the dataset compatible with each other and clean some of the data,&lt;/li&gt;
&lt;li&gt;model and collect metadata that made sense for this dataset,&lt;/li&gt;
&lt;li&gt;release the dataset and fix the issues that came up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To this date, two tasks remain on my to-do list for McCatmus: train a transcription model corresponding to this dataset and compare it with other existing ones, and make sure to have a publication describing this dataset and its usefulness.&lt;/p&gt;
&lt;p&gt;My plan is to dedicate one post to the creation of the guidelines for the dataset, then a post about the identification and collection of the datasets used in McCatmus v1, and then I'll wrap up with a post about the process to create the dataset, the metadata and the release. Stay tuned!&lt;/p&gt;</description><category>CATMuS</category><category>HTR</category><guid>https://alix-tz.github.io/phd/posts/018/</guid><pubDate>Wed, 14 Aug 2024 04:00:00 GMT</pubDate></item><item><title>017 - Deploying eScriptorium online: notes on CREMMA's server specifications</title><link>https://alix-tz.github.io/phd/posts/017/</link><dc:creator>Alix Chagué and Thibault Clérice</dc:creator><description>&lt;p&gt;&lt;a href="https://gitlab.com/scripta/escriptorium/"&gt;eScriptorium&lt;/a&gt; is a web application designed to perform automatic text recognition campaigns, by default powered by the OCR/HTR engine &lt;a href="https://kraken.re/"&gt;Kraken&lt;/a&gt;. It comes in a decentralized form, meaning that the application is not distributed by a single organization but can, on the contrary, be deployed by several actors on many different servers. In fact, you can also deploy eScriptorium &lt;a href="https://gitlab.com/scripta/escriptorium/-/wikis/docker-install"&gt;on your personal machine&lt;/a&gt;, simulating a local server.&lt;sup id="fnref:localhost"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/017/#fn:localhost"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;As eScriptorium is gaining attention, more institutions are interested in building their own server to host the application and offer it to their associates. At Inria, we deployed eScriptorium for the first time in 2020, specifically for the project called &lt;a href="https://lectaurep.hypotheses.org/"&gt;LECTAUREP&lt;/a&gt; which we ran with the &lt;a href="https://www.archives-nationales.culture.gouv.fr/"&gt;French national archives&lt;/a&gt; between 2018 and 2021. While the initial server was hosted on a virtual machine, without any GPU, and open to a relatively small amount of users, our current eScriptorium application already counts nearly 500 users and will soon be hosted on a much different server infrastructure, funded by the &lt;a href="https://www.pamir.fr/projets-soutenus/cremma/"&gt;CREMMA project&lt;/a&gt;. Between the original LECTAUREP-eScriptorium server and the CREMMA server, we moved to a dedicated server (&lt;code&gt;Traces-6&lt;/code&gt;) for which we invested about 20K€.&lt;/p&gt;
&lt;p&gt;Since I have been regularly in touch with people from different institutions who were looking into buying the hardware to create their own server for eScriptorium, I thought it was largely time to put all the deets in writing!&lt;/p&gt;
&lt;p&gt;To write today's post, I'm very happy to welcome a second pair of hands: Thibault Clérice's. His expertise and involvement in designing CREMMA server are crucial here!&lt;/p&gt;
&lt;p&gt;Let's first discuss some technical requirements, then we'll describe how the CREMMA server was designed. We finish with some very important remarks on the necessity (or not) to build a server and on useful alternatives for the community!&lt;/p&gt;
&lt;h3&gt;Should you buy GPUs?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Graphics_processing_unit"&gt;GPUs&lt;/a&gt; (or Graphics Processing Units) are not mandatory at all when you use eScriptorium. This is the reason why it is perfectly acceptable to run eScriptorium locally, on your own computer. Actually GPUs are not even mandatory to train Kraken models: training can be done on CPUs (your computer's processor), they will simply go much much much slower.&lt;/p&gt;
&lt;p&gt;That, however, is true for personal or light use of the training features. If on the contrary you create a server open to dozens of users or more, then connecting eScriptorium to GPUs is very much a good idea: since training a model on a CPU alone can take 2-3 days (or much more), you don't really want 10 users to start a training task at the same time. In the absence of shared GPUs, their training will be queued for days or even weeks and the overload might degrade the experience of other users on the rest of the application. As long as we are building an infrastructure (and hopefully sharing costs), we may as well enhance the experience of everyone, no?&lt;/p&gt;
&lt;p&gt;This being said, you shouldn't rush and go buy a GPU right away. Instead, you should first look at options to &lt;em&gt;optimize&lt;/em&gt; its usage or at infrastructures that are already available to you. For example, the &lt;a href="https://www.unige.ch/lettres/humanites-numeriques/recherche/projets-de-la-chaire/fondue"&gt;FONDuE infrastructure&lt;/a&gt;, at the University of Geneva, doesn't use the GPUs only for eScriptorium: they connect their application to a cluster which is used by researchers for intense computation tasks outside of eScriptorium (it's an &lt;a href="https://en.wikipedia.org/wiki/High-performance_computing"&gt;HPC&lt;/a&gt; with a university-wide queue controlled by &lt;a href="https://en.wikipedia.org/wiki/Slurm_Workload_Manager"&gt;SLURM&lt;/a&gt;). This is a very good solution for optimization, because training Kraken models is not a constant activity: if the GPU is dedicated to eScriptorium only, then it will be used for a few hours here and there, not even at 100% of its capacity. Think of it: users of the application will usually need to train a model at the beginning of their transcription campaign, therefore once they have an &lt;a href="https://alix-tz.github.io/phd/posts/12/"&gt;accurate model&lt;/a&gt;, they will focus on using the model for prediction, which doesn't rely on the GPUs (and Kraken isn't really optimized for GPU usage at prediction time anyway).&lt;/p&gt;
&lt;p&gt;Other possibilities include connecting the server to a completely physically separate cluster where training jobs are submitted. This is a possibility that several people told me they were exploring, but I don't know if anyone has set it already. Why would you opt for a solution with an external cluster? To replace some huge investment costs (original funding) with some smaller (but much more regular) functioning costs: for example, for CREMMA, nearly half of our 40K€ budget was spent, in 2022, on buying two &lt;a href="https://www.nvidia.com/fr-fr/data-center/a100/"&gt;A100 graphic cards from Nvidia&lt;/a&gt;. When using someone else's GPUs, not only you save the money you would spend on the hardware, but on top of that, you contribute to optimizing the use of other GPUs already in place. Another reason is because you might not have the human resources to administer the system and the GPUs. There are multiple calculation clusters created for Academia (of the top of our head: &lt;a href="https://www.cnrs.fr/fr/presse/jean-zay-le-supercalculateur-le-plus-puissant-de-france-pour-la-recherche"&gt;Jean Zay&lt;/a&gt; or &lt;a href="https://www.calculquebec.ca/services-aux-chercheurs/infrastructures-et-services/"&gt;Calcul Québec&lt;/a&gt;), and you could even consider using commercial solutions as well (like &lt;a href="https://aws.amazon.com/nvidia/"&gt;AWS&lt;/a&gt;, &lt;a href="https://cloud.google.com/gpu?hl=fr"&gt;Google Cloud&lt;/a&gt; and the like). Then, your money is spent on the actual computation and not on making the computation possible in the first place.&lt;/p&gt;
&lt;p&gt;Fair enough, plugging eScriptorium's task manager to an external server might not be that simple. However, for smaller groups of users, it is also worth taking into account that it is perfectly possible to train Kraken models using Kraken directly (through an SSH connection to a (super-)cluster, for example) before uploading them into the application. In such a case, eScriptorium is only used for its ergonomics, not as a simplified interface to train models.&lt;/p&gt;
&lt;p&gt;Let's summarize the point here: GPUs are not always a must-have for eScriptorium or Kraken, so you should definitely consider first and foremost your future usage. They currently represent the biggest share in the hardware expenses to build a calculation server. There are options out there where you don't spend 10K€ to buy a GPU but rather connect to an external, ready-to-use service. Or, if you do decide to spend the money, you should consider ways to maximize its usage for other training tasks, possibly outside of eScriptorium.&lt;/p&gt;
&lt;h3&gt;Some considerations on storage&lt;/h3&gt;
&lt;p&gt;Normally, eScriptorium is used as an (assisted) annotation environment to obtain the transcription of documents. You would use eScriptorium:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In a preparatory phase:&lt;ul&gt;
&lt;li&gt;(1a) to produce training data, and&lt;/li&gt;
&lt;li&gt;(1b) to elaborate (aka train) performant segmentation or transcription models;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In a production phase, but only for relatively small corpora, to apply segmentation and transcription models and manually correct the results (in which case the size of the corpora must be compatible with the scale of what an individual or your assembled team can process);&lt;/li&gt;
&lt;li&gt;In a post-production phase, including for samples of a very large corpus, to easily visualize and control the result of the (large-scale) automatic prediction and potentially correct it (cf. n°2).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the other hand, large scale transcription campaigns should probably be led with Kraken in the command line directly (so only n°1 and n°3 necessitate eScriptorium). Thibault has even produced a small python library to design such campaigns (&lt;a href="https://github.com/ponteIneptique/rtk"&gt;RTK&lt;/a&gt;, for Release the Krakens) which was recently used in &lt;a href="https://enc.hal.science/hal-04250657/"&gt;a paper&lt;/a&gt;&lt;sup id="fnref:lovewarref"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/017/#fn:lovewarref"&gt;2&lt;/a&gt;&lt;/sup&gt; where a 38.5M token corpus was produced. In some cases, n°1b even benefits from being performed outside of eScriptorium, since the application offers a very limited control over &lt;a href="https://kraken.re/main/ketos.html#recognition-training"&gt;Kraken's training parameters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This has several consequences on the way you should consider storage on a server dedicated to eScriptorium. Duplicates of images are created on the server while they are being processed in the application, but they should always be considered as such: temporary duplicates while phase 1, 2 or 3 are under progress. They shouldn't be considered as if eScriptorium was 1) an archiving solution for transcription projects, 2) a querying interface to explore a corpus or even 3) a publication environment for a minimalistic digital edition. eScriptorium is only one brick --an early one even-- in the corresponding pipelines. Instead, the original image files should be stored somewhere else, in an adapted data warehouse (like &lt;a href="https://zenodo.org/"&gt;Zenodo&lt;/a&gt;, &lt;a href="https://www.nakala.fr/"&gt;Nakala&lt;/a&gt;, etc.), or published in digital libraries under the responsibility of their owner (like &lt;a href="https://archive.org/"&gt;Internet Archive&lt;/a&gt;, &lt;a href="https://gallica.bnf.fr/"&gt;Gallica&lt;/a&gt;, etc.).&lt;/p&gt;
&lt;p&gt;What this means when designing a server to host eScriptorium is that its storage capacity should of course be big enough to store the temporary image files,&lt;sup id="fnref:temporary"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/017/#fn:temporary"&gt;3&lt;/a&gt;&lt;/sup&gt; while users are working on their annotation, aka the active projects. However, this storage doesn't need to be expended all the time and it should also be ok to flush the terminated projects: at that point the images and their annotations should have been archived on more appropriate data warehouses by their creators, and it should be their responsibility.&lt;/p&gt;
&lt;h3&gt;Don't forget the RAM!&lt;/h3&gt;
&lt;p&gt;Not overlooking the &lt;a href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt; is very important when designing your server! But what is it used for? It's used for cache by the web application: it means that frequently accessed data, like web pages and images but also the content of the database, are temporarily loaded in live memory. Cache thus ensures that the requests sent by the users are served quickly. For example, if you don't have enough RAM (or enough cache), pages will load slowly, and if you have used eScriptorium before reading this post, you know how important it is to be able to load images fast enough.&lt;/p&gt;
&lt;p&gt;RAM is also essential for inference and training because images and annotations are loaded in memory before being passed to the CPU or the GPU. If the RAM is not powerful enough, it will be detrimental to computation and will cause a bottleneck situation. Thus having invested in GPUs and/or CPUs but not in enough RAM would be like having a horse to pull a Ferrari: even if prediction and training could go fast on the processing units, it will be restrained by the available live memory.&lt;/p&gt;
&lt;h3&gt;Modularity for the CREMMA infrastructure&lt;/h3&gt;
&lt;p&gt;The CREMMA infrastructure was originally designed by Thibault with a simple but essential principle in mind: modularity. Instead of thinking of an eScriptorium server as a monolithic block of hardware designed for front-end service, storage and intense computation, he suggested to break each of these blocks into individual servers connected together. CREMMA&lt;sup id="fnref:cremma"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/017/#fn:cremma"&gt;4&lt;/a&gt;&lt;/sup&gt; is thus made of at least three servers, as shown in the schema below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CREMMA_FRONTEND&lt;/code&gt;, for the front-end, where the application is deployed and where the database is stored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CREMMA_STORAGE&lt;/code&gt;, for storage, where all the images and models, as well as the backup of the database are stored on the long term. Currently, &lt;code&gt;CREMMA_STORAGE&lt;/code&gt; has a storage capacity of 38Tb&lt;sup id="fnref:storage"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/017/#fn:storage"&gt;5&lt;/a&gt;&lt;/sup&gt; but we could easily add more disks if we find that it is necessary. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;CREMMA_COMPUTE&lt;/code&gt;, where the two A100 GPUs I mentioned earlier are plugged and where the application task manager "sends" all the jobs, whether they are to be run on CPU (these tasks include segmentation and transcription prediction for example), or on GPU (training for the most part).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://alix-tz.github.io/phd/images/CREMMA_server_specs.png" alt="A model of the CREMMA infrastructure where three blocks (front-end, storage and compute) are connected together through an intranet 10Gb/s connection. For each block, one or two server(s) is presented along with their specification. Credits: Thibault Clérice and Alix Chagué. The full text of the specifications is accessible in a commentary in the source code of this page, just after this image." widht="400px"&gt;&lt;/p&gt;
&lt;!-- 
Full text of the specifications displayed on the image, for accessibility purposes:

- CREMMA_FRONTEND: 2xEPYC 7302 16C/32T; 128 Gb RAM; 1.6 To; RAID with 8Gb Cache.
- CREMMA_STORAGE: Optimized for cache; 256 Gb RAM; 2xRaidZ 19Tb; NVME for ZFS / L2ARC; SSD for OS.
- CREMMA_COMPUTE: 2xAMD EPYC 7302 16C/32T; 128 Gb RAM; 2xRTX A6000 24Gb.
- TRACES-6: 2xEPYC 7452 32C/64T; 512 Gb RAM; 0.8 Tb RAID with 8Gb Cache; 2xA100 40 Gb.
--&gt;

&lt;p&gt;As you can see on the schema, there will actually be a fourth server involved in the infrastructure: &lt;code&gt;Traces-6&lt;/code&gt;, the server we currently use &lt;a href="https://escriptorium.inria.fr/"&gt;to deploy eScriptorium at Inria&lt;/a&gt;. Like &lt;code&gt;CREMMA_COMPUTE&lt;/code&gt;, &lt;code&gt;Traces-6&lt;/code&gt; can be called by &lt;code&gt;CREMMA_FRONTEND&lt;/code&gt; for computation tasks. In fact, this is where the modularity of the system is interesting: with such a set-up, it is possible to add more computation servers to the pool of GPUs reachable by &lt;code&gt;CREMMA_FRONTEND&lt;/code&gt; without having to redesign the whole infrastructure. On their side, &lt;code&gt;CREMMA_FRONTEND&lt;/code&gt; and &lt;code&gt;CREMMA_STORAGE&lt;/code&gt; can be upgraded (to add more RAM or more storage) very easily.&lt;/p&gt;
&lt;p&gt;This modularity also means that the GPUs remain free for other uses: for example if we were to have to run maintenances on &lt;code&gt;CREMMA_COMPUTE&lt;/code&gt;, we can simply cut it from the infrastructure, and let &lt;code&gt;CREMMA_FRONTEND&lt;/code&gt; interact with &lt;code&gt;Traces-6&lt;/code&gt; only while we work on &lt;code&gt;CREMMA_COMPUTE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CREMMA_COMPUTE&lt;/code&gt; is equipped with two &lt;a href="https://www.nvidia.com/fr-fr/data-center/a100/"&gt;A100&lt;/a&gt; graphic cards, and &lt;code&gt;Traces-6&lt;/code&gt; with two &lt;a href="https://www.nvidia.com/fr-fr/design-visualization/rtx-6000/"&gt;RTX 6000&lt;/a&gt;. Actually, it doesn't mean that only 4 training can be happening at once. Each of these GPUs offer between 24 and 40 Gb of RAM for intense computation. It's a lot. It's so much actually that training a Kraken model at max speed would rarely use more than 40% of this processing power. &lt;a href="https://www.nvidia.com/en-us/data-center/virtual-solutions/"&gt;Virtualization&lt;/a&gt; is a nice trick to "break" the GPU down into smaller virtual GPUs (or vGPUs). What is broken down is the RAM capacity. We opted for the following virtualization set up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each of the A100 graphic cards and their 40Gb of RAM are turned into 1 10Gb vGPU + 5 5Gb vGPUs (since 10+5x5=35, note that we must leave 5Gb out of the equation for the virtualization).&lt;/li&gt;
&lt;li&gt;No virtualization is applied to Traces-6's RTX6000s.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How did we decide on these numbers? Thibault ran a series of small tests executing either &lt;a href="https://kraken.re/main/ketos.html#segmentation-training"&gt;&lt;code&gt;segtrain&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://kraken.re/main/ketos.html#recognition-training"&gt;&lt;code&gt;train&lt;/code&gt;&lt;/a&gt; and playing with two different parameters: the &lt;a href="https://github.com/mittagessen/kraken/blob/992fb0bc915e689fc76fa6b021e364c3f0f17ca3/kraken/ketos/recognition.py#L38"&gt;batch size&lt;/a&gt;&lt;sup id="fnref:batch_size"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/017/#fn:batch_size"&gt;6&lt;/a&gt;&lt;/sup&gt; and the &lt;a href="https://github.com/mittagessen/kraken/blob/992fb0bc915e689fc76fa6b021e364c3f0f17ca3/kraken/ketos/recognition.py#L79"&gt;single point precision&lt;/a&gt;&lt;sup id="fnref:precision"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/017/#fn:precision"&gt;7&lt;/a&gt;&lt;/sup&gt;. He found that for training a recognition model with a batch size of 8 and either 32 or 16 of precision, less than 5 Gb of RAM on the GPU is enough. With a batch size of 1 and a precision of 32, it's even less than 1 Gb. To train a segmentation model, less than 10Gb is enough, and this type of training is more rare. Since our goal for the infrastructure is not to maximize the speed of the training but to maximize the amount of possible parallel training jobs at decent speed, we decided that 10 vGPUs with 5Gb of RAM and 2 vGPUs with 10Gb of RAM were a good compromise. If we find that more GPU RAM is occasionally needed, we still have two times 24Gb with the RTX6000!&lt;/p&gt;
&lt;h3&gt;Should you build your own server?&lt;/h3&gt;
&lt;p&gt;We have spent all this time writing about how to build, how to spec out your server or your infrastructure, but let's talk about the elephant in the room: should you do it?&lt;/p&gt;
&lt;p&gt;Well, it's all a matter of perspectives. We'd say it probably makes sense if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are a very big organization, you have a lot of money available to you, a super-cluster (and possibly a well staffed IT services department), and you have a high demand;&lt;/li&gt;
&lt;li&gt;You are working on very sensitive data that can't be shared with the outside (&lt;em&gt;e.g.&lt;/em&gt; medical reports);&lt;/li&gt;
&lt;li&gt;You are geographically far away from any other existing server, and face latency issues when you connect to potential welcoming servers;&lt;/li&gt;
&lt;li&gt;Servers that exist around you are reluctant to onboard you and the teams behind the request for a server of your own.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These four points are definitely valid. But we'd say that, if you are in another situation, sharing infrastructural costs probably makes way more sense. In our experience, building a server is long, tedious, require special (and rare) skills&lt;sup id="fnref:sysadmin"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/017/#fn:sysadmin"&gt;8&lt;/a&gt;&lt;/sup&gt; and costly (in terms of human resources as well!). Setting up a working server can take a really long time. For CREMMA, we ended up outsourcing part of the installation of the new infrastructure because we realized that we did not have the time nor the skills to set everything up ourselves. The cost of this installation by a third-party? Between 8 and 12K€, and again, a little time and bandwidth on our end.&lt;/p&gt;
&lt;p&gt;Next you have the maintenance fees. You can outsource them, for a little bill from a company which would make sure that everything is installed on time, that updates work well, etc. Or you can do the maintenance yourself. But again, this comes with a cost: human time. A worker on the server goes down? You are in for a few hours. Some people crashed a third-party server by uploading too much IIIF images on your instance of eScriptorium? Well, then you will not only receive emails from these third parties (and this is completely normal), but also have to deal with your user base doing things that eScriptorium allows and that you may not (yet) be able to control/limit.&lt;/p&gt;
&lt;p&gt;In the end, we would definitely recommend that, when this is possible, you first consider joining existing servers, including by offering &lt;em&gt;quid pro quo&lt;/em&gt; by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Participating in covering the salary of people maintaining the server (through some kind of yearly fees for example);&lt;/li&gt;
&lt;li&gt;Providing some money to expand the existing infrastructure (to increase storage or computation, etc);&lt;/li&gt;
&lt;li&gt;In general, helping eScriptorium grow, discussing with the owners of the server you are joining and/or the eScriptorium team about what kind of new functionality should be added, and if you can contribute to fund these updates.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This final point is super important: sure, owning your own server sounds appealing, even if it is costly to put in place. However, developing eScriptorium also comes with expenses. Thus, participating in eScriptorium directly -- we think -- is also very beneficial and welcome by the developing team. Open-source is free to use, free of charge but is not appearing out of thin air: developing costs money. And the more people participate in infrastructural costs (servers or software), the better the experience will be.&lt;/p&gt;
&lt;!-- footnotes --&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:localhost"&gt;
&lt;p&gt;If you don't know anything about local servers and are curious to learn more, you can check this page: &lt;a href="https://www.freecodecamp.org/news/what-is-localhost/"&gt;https://www.freecodecamp.org/news/what-is-localhost/&lt;/a&gt;. Or you can also take a look at the corresponding &lt;a href="https://en.wikipedia.org/wiki/Localhost"&gt;entry&lt;/a&gt; in Wikipedia! &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/017/#fnref:localhost" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:lovewarref"&gt;
&lt;p&gt;The full reference is: Jean-Baptiste Camps, Nicolas Baumard, Pierre-Carl Langlais, Olivier Morin, Thibault Clérice, et al.. Make Love or War? Monitoring the Thematic Evolution of Medieval French Narratives. Computational Humanities Research (CHR 2023), Dec 2023, Paris, France. ⟨hal-04250657⟩ &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/017/#fnref:lovewarref" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:temporary"&gt;
&lt;p&gt;By temporary, we don't mean that the image file are stored for a few hours only, on the contrary, they can stay on the disk for many years. We mean that it should be ok to consider that they can be erased whenever a user is done working on a corpus and has moved away from the transcription phase. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/017/#fnref:temporary" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:cremma"&gt;
&lt;p&gt;From now on, "CREMMA" means the server created through the CREMMA project. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/017/#fnref:cremma" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:storage"&gt;
&lt;p&gt;Safety first! We have 38 Tb available, but there is actually a little more  physically because we have redundancy and spare. We have 2 series of disks working with redundancy (&lt;a href="https://openzfs.github.io/openzfs-docs/Basic%20Concepts/RAIDZ.html"&gt;RaidZ&lt;/a&gt;). In each series two disks are entirely dedicated to redundancy only, and one more is completely unused until something fails (it is used as a safety spare disk). While &lt;code&gt;CREMMA_STORAGE&lt;/code&gt;, as we said before, is not used as a permanent storage solution, it needs to be a little bit safe for the user base. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/017/#fnref:storage" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:batch_size"&gt;
&lt;p&gt;To understand what the batch size corresponds to and why it is important, you can check this entry in the Stack Exchange forum: &lt;a href="https://stats.stackexchange.com/questions/153531/what-is-batch-size-in-neural-network"&gt;https://stats.stackexchange.com/questions/153531/what-is-batch-size-in-neural-network&lt;/a&gt;. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/017/#fnref:batch_size" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:precision"&gt;
&lt;p&gt;To quote &lt;a href="https://kraken.re/main/ketos.html#recognition-model-training"&gt;Kraken's documentation&lt;/a&gt;: "When using an Nvidia GPU, set the --precision option to 16 to use automatic mixed precision (AMP). This can provide significant speedup without any loss in accuracy." Kraken's default value for precision is 32. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/017/#fnref:precision" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:sysadmin"&gt;
&lt;p&gt;It can be difficult to justify hiring a full-time or even part-time system administrator for a team because it is a very specialized and highly demanded type of profile. For example, public organizations can rarely offer competitive salaries compared to the private sector. In addition, the workload for administrating a web server can be irregular, and it can be difficult to make the skills for system administration meet with other needs faced by a team, complicating even more offering a meaningful full-time job. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/017/#fnref:sysadmin" title="Jump back to footnote 8 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>CREMMA</category><category>eScriptorium</category><category>HTR</category><category>kraken</category><guid>https://alix-tz.github.io/phd/posts/017/</guid><pubDate>Fri, 22 Dec 2023 13:43:54 GMT</pubDate></item><item><title>014 - RT(F)M for the Peraire Experiment</title><link>https://alix-tz.github.io/phd/posts/014/</link><dc:creator>Alix Chagué</dc:creator><description>&lt;p&gt;Turns out, there is more to say on last week's &lt;a href="https://alix-tz.github.io/phd/posts/013/"&gt;experiments on the Peraire dataset&lt;/a&gt;! And I found out while I was working on a completely different dataset. Let me explain!&lt;/p&gt;
&lt;p&gt;This morning, I helped my colleague train a Kraken transcription model for &lt;a href="https://ecrituresnumeriques.ca/fr/Activites/Projets/2016/1/19/Anthologie-grecque"&gt;Greek manuscripts&lt;/a&gt;. They gave me the ground truth and I set and executed the training from the command line. It gave me an opportunity to try fine-tuning a model like &lt;a href="https://zenodo.org/record/7234166"&gt;CREMMA Medieval&lt;/a&gt;, in stead of only training from scratch. &lt;strong&gt;CREMMA Medieval&lt;/strong&gt; was trained on manuscripts written in Latin, whereas the Greek manuscripts were written only, well, in Ancient Greek. I didn't want the resulting model to add Latin letters in the transcription when applied to other Greek documents, so I used Kraken's option to allow the model to forget previously learned characters and to force it to only remember the characters contained in the new training data. This option is called &lt;strong&gt;&lt;code&gt;--resize&lt;/code&gt;&lt;/strong&gt; (check the documentation &lt;a href="https://github.com/mittagessen/kraken/blob/4.3.7/docs/ketos.rst#fine-tuning"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;When I fine-tune a model, I usually follow Kraken's recommendations and keep both the previously learned characters and the new ones coming from the new set of ground truth. When this morning I checked what is the keyword to use to keep only the characters from the new dataset, I realized that I didn't correctly set the training on Peraire last week. I had set it to only keep the new characters!&lt;/p&gt;
&lt;p&gt;Up until Kraken v. 4.3.10, &lt;strong&gt;&lt;code&gt;--resize&lt;/code&gt;&lt;/strong&gt; can take the keywords &lt;strong&gt;&lt;code&gt;both&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;add&lt;/code&gt;&lt;/strong&gt;. The ambiguity of these keywords &lt;a href="https://github.com/mittagessen/kraken/issues/478"&gt;has been discussed&lt;/a&gt; in the past, which is the reason why starting from Kraken v. 4.3.10, the keywords respectively become &lt;strong&gt;&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;union&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let's quote the manual:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two modes dealing with mismatching alphabets, &lt;strong&gt;add&lt;/strong&gt; and &lt;strong&gt;both&lt;/strong&gt;. &lt;strong&gt;add&lt;/strong&gt; resizes the output layer and codec of the loaded model to include all characters in the new training set without removing any characters. &lt;strong&gt;both&lt;/strong&gt; will make the resulting model an exact match with the new training set by both removing unused characters from the model and adding new ones.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I fell for this trap of ambiguity and used &lt;strong&gt;both&lt;/strong&gt; instead of &lt;strong&gt;add&lt;/strong&gt;, thinking &lt;strong&gt;both&lt;/strong&gt; meant I was keep &lt;em&gt;both&lt;/em&gt; character sets. (Again this is the very reason why the keywords were recently changed).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: you should really read &lt;a href="https://alix-tz.github.io/phd/posts/013/"&gt;last week's post&lt;/a&gt; to fully understand the rest of this post!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At the end of my post last week, I wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;peraire_D&lt;/strong&gt; on the other hand seems to lose it completely on the B series. This is most likely due to the fact that the contrast between the page and the "ink" is too low in the pencil-written series compared to the data used to train &lt;strong&gt;Manu McFrench&lt;/strong&gt; and in the D series. &lt;strong&gt;peraire_D&lt;/strong&gt; even loses 11 points of accuracy to &lt;strong&gt;Manu McFrench&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But how could I be sure that it was not actually due to the fact that the model had unlearned some precious characters?&lt;/p&gt;
&lt;p&gt;The only way to know, I thought, was to re-train the models! I used this opportunity to also train the models from scratch because I was curious to see how much noise/improvement was brought by the base model.&lt;/p&gt;
&lt;p&gt;I tried 4 types of models and, like last week, used &lt;a href="https://github.com/WHaverals/CERberus"&gt;CERberus 🐶🐶🐶&lt;/a&gt; to measure the character error rates on the predictions made on the test sets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Models trained "from scratch"&lt;/li&gt;
&lt;li&gt;A model not trained on any data coming from the Peraire dataset (aka &lt;a href="https://zenodo.org/record/6657809"&gt;&lt;strong&gt;Manu McFrench&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Models obtained from finetuning &lt;strong&gt;Manu McFrench&lt;/strong&gt; using the &lt;strong&gt;add&lt;/strong&gt; resize mode&lt;/li&gt;
&lt;li&gt;Models obtained from finetuning &lt;strong&gt;Manu McFrench&lt;/strong&gt; using the &lt;strong&gt;both&lt;/strong&gt; resize mode&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For each model trained on the Peraire dataset, I used 3 compositions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the full dataset ("ALL")&lt;/li&gt;
&lt;li&gt;only data coming from the B series ("B")&lt;/li&gt;
&lt;li&gt;only data coming from the D series ("D")&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I used the same composition system for the test sets.&lt;/p&gt;
&lt;p&gt;Here are my results in the form of a table:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alix-tz.github.io/phd/images/peraire_scores.png" alt="a table of the scored obtained on the different train set, test set and resize configurations" widht="400px"&gt;&lt;/p&gt;
&lt;p&gt;Fortunately, it seems that my previous interpretation is not fully contradicted by the results I obtain with this second series of training. Let's focus on two observations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Whenever a model is trained only on the D series, and tested only on the B series, it appears to be completely incapable of predicting anything but gibberish, losing between 32 and 35 points of accuracy. It confirms that the aspect of the documents from the two series are too different. On the other hand, when the model is fine-tuned on the B series only, it maintains a fairly good accuracy when applied to the D series, whichever resize mode is used. I think it confirms that the B series is enough for the model to learn some sort of formal features from Peraire's handwriting, which the models can transfer to documents written with a different writing instrument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is very interesting is the difference between the models trained on the whole datasets and tested on the B series: when we use the &lt;strong&gt;both&lt;/strong&gt; resize mode (meaning we only keep the characters from the new dataset), the model is very good. On the contrary, the performance of the model trained with the &lt;strong&gt;add&lt;/strong&gt; resize mode (meaning we keep the output layer and the codec from the base model and add the new characters) is as bad as with a model trained only on the D series.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my previous post, I wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;peraire_both&lt;/strong&gt; is able to generalize from seeing both datasets and even benefits from seeing more data thanks to the D series, since it performs better on the B series compared to &lt;strong&gt;peraire_B&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, in the light of my experiment with the &lt;strong&gt;resize&lt;/strong&gt; option, I think this is not correct. Instead, it appears that resetting the output layer by using &lt;strong&gt;both&lt;/strong&gt; (or &lt;strong&gt;new&lt;/strong&gt;) on accident, allowed the model to better take into account the data from the B series (pencil). Contrary to what I observed last week, the model trained on the whole dataset but this time with the &lt;strong&gt;add&lt;/strong&gt; resize mode (or &lt;strong&gt;union&lt;/strong&gt;) doesn't benefit from seeing more data compared to the model trained only on the B series.&lt;/p&gt;
&lt;p&gt;My understanding is that keeping the output layer from the base model with &lt;strong&gt;add&lt;/strong&gt; (or &lt;strong&gt;union&lt;/strong&gt;) probably drowns the specificity of the pencil-written documents into a base knowledge tailored to handle documents with a high contrast (like the ones in the D series &lt;em&gt;and&lt;/em&gt; in &lt;strong&gt;Manu McFrench&lt;/strong&gt;'s training set). Or, to put it differently, when we use &lt;strong&gt;both&lt;/strong&gt; (or &lt;strong&gt;new&lt;/strong&gt;), more attention is given to the pencil written documents, meaning that the model actually gets better at handling this category of data.&lt;/p&gt;
&lt;p&gt;I am extremely curious to see how I can investigate this further, or if any of you, readers, would understand these results differently!&lt;/p&gt;</description><category>experiment</category><category>HTR</category><category>kraken</category><guid>https://alix-tz.github.io/phd/posts/014/</guid><pubDate>Fri, 04 Aug 2023 17:51:14 GMT</pubDate></item><item><title>013 - The Peraire experiment</title><link>https://alix-tz.github.io/phd/posts/013/</link><dc:creator>Alix Chagué</dc:creator><description>&lt;p&gt;&lt;em&gt;WARNING: in my &lt;a href="https://alix-tz.github.io/phd/posts/014/"&gt;next post&lt;/a&gt;, I nuance the conclusions drawn in this post, because of a parameter I didn't correctly set during the training of the models described below. You should really read it after reading this post, to get the full picture!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As a small side project during my phD, I have been sharing my expertise (and a bit of my workforce) with the members of the &lt;a href="https://www.pamir.fr/projets-soutenus/spe-vlp/"&gt;DIM SPE-VLP&lt;/a&gt; project. The acronym stands for "Sauver le patrimoine espérantiste : le voyage de Lucien Péraire (1928-1932)." The project revolves around the digitization, transcription and edition/valorization of &lt;a href="https://fr.wikipedia.org/wiki/Lucien_P%C3%A9raire"&gt;Lucien Peraire&lt;/a&gt;'s archives. He was a French citizen who, in the late 1920s, travelled across the European and the Asian continents, mostly by bike and using &lt;a href="https://en.wikipedia.org/wiki/Esperanto"&gt;Esperanto&lt;/a&gt; to communicate. He kept a diary during his journey (and later published a book about his adventures). His notes are written both in French and in Esperanto and in some documents, he also used &lt;a href="https://en.wikipedia.org/wiki/Shorthand"&gt;stenography&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My contribution to the project has mostly consisted in helping developing transcription models for the French diaries (although I'm also interested in the shorthand and the esperanto). This meant both helping with the production of ground truth and training &lt;a href="https://kraken.re/"&gt;Kraken&lt;/a&gt; models. This post will briefly explain how the ground truth was created and published, as well as present the models that were trained with it.&lt;/p&gt;
&lt;p&gt;Peraire's notebooks are organized in different series, and each series is divided in ensembles regrouping the pages of a notebook. Each ensemble is named after the countries visited while the notebook was used. For example, notebook 11 in the B series forms one ensemble and covers a part of Peraire's travels in Japan. There are 31 notebooks in the B series. The notebooks of this series are written with a blue pencil on (low quality) school papers. On some pages, the pencil is very faded which makes it hard to read the text, let alone to run a successful segmentation task on the image. On the other hand, the D series gathers notes and comments on the diaries, written at the end of the 1960s. This time the handwriting is much easier to read because Peraire mostly used a blue or black ball-point pen. There are 9 ensembles in this series.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alix-tz.github.io/phd/images/peraire_handwriting.png" alt="two extracts of Peraire's notebooks side by side, on the left the image is taken from the B series, on the right the image is taken from the D series." widht="600px"&gt;&lt;/p&gt;
&lt;p&gt;One aspect that I find particularly interesting with this dataset is that we have a case where the handwriting is similar but the writing tool is different. It means that it is possible to explore how the writing tools and/or writing supports affect the efficiency of a transcription model. On top of that, all the documents were digitized under the same (good) conditions and by the same people.&lt;/p&gt;
&lt;h3&gt;Segmenting, transcribing, aligning and publishing&lt;/h3&gt;
&lt;p&gt;The first version of the dataset was solely focused on the B series. I selected 1 random page from each ensemble (avoiding to take the first page each time) to compose a train set of 33 files&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/013/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. On top of that, I selected 4 additional pages from B3, B5, B12 and B18 to compose a fixed test set which would never be used as training data.&lt;/p&gt;
&lt;p&gt;I pre-segmented the images with Kraken's default model before correcting the result manually. At this point, I also applied the &lt;a href="https://segmonto.github.io/"&gt;segmOnto&lt;/a&gt; ontology for the lines and regions&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/013/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Because of the &lt;a href="https://raw.githubusercontent.com/alix-tz/peraire-ground-truth/master/data/train/B.2.europe-orientale_0007.jpg"&gt;fading ink&lt;/a&gt;, some words could not be transcribed. In order to avoid complicating the transcription rules, I decided to simply segment out the passages that couldn't be read. On the one hand it simplifies the transcription, but on the other hand, it means that a small portion of my segmented documents cannot be re-used by others to train a segmentation model. Since we were not training a segmentation model, it was an easy decision.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alix-tz.github.io/phd/images/peraire_faded.png" alt="screenshot showing the segmentation and the transcription panels from eScriptorium where we can see that some lines are broken down into several segments and that some segments were left blank" widht="400px"&gt;&lt;/p&gt;
&lt;p&gt;More recently, it was decided to augment the dataset with examples from the D series because the model trained on the B series was not good enough. This time, Gilles Pérez, a member of the project, took charge of the transcription. I recommended to create a new sample of 30 to 40 images, so he randomly selected series of 4 continuous pages from each ensemble. The transcription of the corresponding 36 pages was sent to me as a Word document. Therefore, on top of taking care of the segmentation of the images, I also went through an alignment phase during which I verified the order of the lines and copy-pasted the transcription. It took longer than I expected but it allowed me to align the transcription with the rules I had followed when creating the first set. I also picked 4 of the 36 pages to add to the test set.&lt;/p&gt;
&lt;p&gt;The dataset is versioned and published applying the principles and tools we developed withing the frame of &lt;a href="https://htr-united.github.io/"&gt;HTR-United&lt;/a&gt;. I also added illustrated segmentation and transcription guidelines.&lt;/p&gt;
&lt;h3&gt;Testing different dataset configurations to train transcription models&lt;/h3&gt;
&lt;p&gt;As I mentioned before, the goal of these datasets was to create transcription models. Taking the opportunity of the recent update of the dataset, I tried different scenarios.&lt;/p&gt;
&lt;p&gt;I never trained the model from scratch because the dataset is too small to get any sort of usable model. Instead, I used &lt;a href="https://zenodo.org/record/6657809"&gt;&lt;strong&gt;Manu McFrench&lt;/strong&gt;&lt;/a&gt; as a base model, fine-tuned with the Peraire dataset. (We were actually able to use Peraire as an example during the &lt;a href="https://www.conftool.pro/dh2023/index.php?page=browseSessions&amp;amp;form_session=76#paperID690"&gt;DH2023&lt;/a&gt; conference&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/013/#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt; earlier this month to show the usefulness of having this kind of base model). I tested fine-tuning only on the B series, only on the D series or on both the B and the D series. Then I used a B-series-only test set, a D-series-only test set and the full test set to see how the models performed.&lt;/p&gt;
&lt;p&gt;Since I wanted to try it after discovering it during DH2023, I used &lt;a href="https://github.com/WHaverals/CERberus"&gt;CERberus 🐶🐶🐶&lt;/a&gt; (I talked about it in my &lt;a href="https://alix-tz.github.io/phd/posts/012/"&gt;last post&lt;/a&gt;) to measure the accuracy of the models on the test sets listed above.&lt;/p&gt;
&lt;p&gt;Like &lt;a href="https://huggingface.co/spaces/lterriel/kami-app"&gt;KaMI&lt;/a&gt;, CERberus takes 2 categories of text input: the reference (aka the ground truth) and the prediction (or the hypothesis made by the model). In order to get the prediction, I loaded my models on eScriptorium, as well as the images and transcription of the test set before applying each model to the documents. This way, all the transcription are predicted with the same segmentation, which comes from the ground truth.&lt;/p&gt;
&lt;p&gt;Here are the results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manu McFrench&lt;/strong&gt;, before fine-tuning, gets a CER of 26.16% when tested on the whole test set, and a score of 27.19% on the documents from the B series, 25.29% on the D series.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peraire_both&lt;/strong&gt;, trained on the B and the D series, gets a CER of 4.63% when tested on the whole test set, but a score of 6.41% on the documents from the B series and 3.54% on the D series.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peraire_B&lt;/strong&gt;, trained only on the B series, gets a CER of 8.72% on the whole test set, but a score of 7.12% on test-B and 9.67% on test-D.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peraire_D&lt;/strong&gt;, trained only on the D series, gets an CER of 16.38% on the whole test set, but this is because of the enormous descripancy between its score on each sub test set. It skyrockets to a CER of 38,53% on test-B while going as low as 3.65% on test-D.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this makes sense, though.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ManuMcFrench&lt;/strong&gt; could not be used without fine-tuning, its error rate on both documents is too high.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peraire_both&lt;/strong&gt; is able to generalize from seeing both datasets and even benefits from seeing more data thanks to the D series, since it performs better on the B series compared to &lt;strong&gt;peraire_B&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peraire_B&lt;/strong&gt; which was trained on the more difficult dataset seems to use the knowledge inherited from &lt;strong&gt;Manu McFrench&lt;/strong&gt; and to have learned some formal features from Peraire's handwriting since it is able to maintain a fairly low CER on the D series (it gains 16 points of accuracy compared to &lt;strong&gt;Manu McFrench&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peraire_D&lt;/strong&gt; on the other hand seems to lose it completely on the B series. This is most likely due to the fact that the contrast between the page and the "ink" is too low in the pencil-written series compared to the data used to train &lt;strong&gt;Manu McFrench&lt;/strong&gt; and in the D series. &lt;strong&gt;peraire_D&lt;/strong&gt; even loses 11 points of accuracy to &lt;strong&gt;Manu McFrench&lt;/strong&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What happens with &lt;strong&gt;peraire_D&lt;/strong&gt; is very interesting because it confirms that it is useful to compose a train set with examples of more difficult documents instead of only showing the ones that are easy to read! Now, the nice thing is that I will soon be working on a little experiment with my colleague Hugo Scheithauer where we will be able to measure the impact of the contrast between the ink and the paper. Stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;EDIT #1: I added the scores obtained by Manu McFrench alone.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;EDIT #2: I added a disclaimer at the beginning of the post.&lt;/em&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I used 2 images from B2 because one of them was extremely faded and I wanted to include some of these extreme cases in the dataset, and 2 images from B30 because it consisted of shorter lines (table of contents) which I found was interesting to include. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/013/#fnref:1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;As described in the documents, I only used the "InterlinearLine" and "DefaultLine" for the lines, and the "MainZone" and "NumberingZone" for the regions. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/013/#fnref:2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;See the submission and the slides on HAL: &lt;a href="https://inria.hal.science/hal-04094241"&gt;https://inria.hal.science/hal-04094241&lt;/a&gt;. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/013/#fnref:3" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>experiment</category><category>HTR</category><category>kraken</category><guid>https://alix-tz.github.io/phd/posts/013/</guid><pubDate>Fri, 28 Jul 2023 15:39:18 GMT</pubDate></item><item><title>012 - "It did a very good job"</title><link>https://alix-tz.github.io/phd/posts/012/</link><dc:creator>Alix Chagué</dc:creator><description>&lt;p&gt;A few weeks ago, I attended the presentation of an automatic transcription software. The majority of the audience was unfamiliar with the concept of handwritten text recognition (HTR) or had little experience using it. The presentation lasted only an hour, so it couldn't delve into much detail. Its main objective was to demonstrate the software's results. The presenter showed several slides, displaying on one side  images of manuscripts (often in a language unknown to the audience) and on the other side the transcriptions generated by the software. Throughout the presentation, the presenter repeatedly commented on the HTR software saying that "it did a very good job."&lt;/p&gt;
&lt;p&gt;But what does it even mean?&lt;/p&gt;
&lt;p&gt;The very first aspect to explore is what distinguishes a good job from a bad one. Normally, such an evaluation relies on the measurement of the accuracy of the result compared to the ideal transcription. The accuracy can be expressed positively or negatively using the error rates (a 0% error rate is the same as a 100% accuracy).&lt;/p&gt;
&lt;p&gt;Measuring the accuracy of a prediction (another way to call the result of HTR) is commonly done at character level. The character accuracy of a model is equal to the number of matches between the prediction and the ideal transcription. The character error rate (CER) is a very common measure to express a model's theoretical efficiency.&lt;/p&gt;
&lt;p&gt;Sometimes softwares also consider the word error rate (WER), which is the proportion of words in the prediction containing errors. A high score at WER doesn't actually mean that the transcription is bad. It only means that the errors are distributed on all the words. I never use WER alone because it is hard to get an exact impression of the quality of the prediction based on that metric alone.&lt;/p&gt;
&lt;p&gt;There is a paper from &lt;a href="https://dl.acm.org/doi/10.1145/3476887.3476888"&gt;Neudecker et al. (2021)&lt;/a&gt; where they test 5 different software used for evaluating the prediction. They also develop an interesting reflection on alternative metrics such as the "non-stopword accuracy", the "phrase accuracy", the "flexible character accuracy" (which is useful when the line order isn't always the same), the "figure of merit" (which "aims to quantify the effort required for manual post-correction" (p. 15)) or else the "unordered WER".&lt;/p&gt;
&lt;p&gt;When your score is a rate, there is an implicit idea that 100% is both the maximum score and the targeted score (for accuracy of course). But in the case of HTR, 100% accuracy is extremely rare because there are also edge cases where the way a letter was drawn is ambiguous: in such cases the error is not particularly caused by the inaccuracy of the HTR engine but rather by the imperfection of the handwriting in the first place.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://openhumanitiesdata.metajnl.com/articles/10.5334/johd.46"&gt;Hodel et al., (2021)&lt;/a&gt;, the authors provided a grid to interpret accuracy scores. They suggest the following three thresholds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CER &amp;lt; 10% == good (it allows efficient post-processing)&lt;/li&gt;
&lt;li&gt;CER &amp;lt; 5% == very good (errors are usually focused on rare or unknown words)&lt;/li&gt;
&lt;li&gt;CER &amp;lt; 2.5% == excellent (but it is usually only reached when the handwriting is very regular)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personally, I think this grid should also include 20% and 0%. 20% as a threshold, because at 80% of accuracy, the transcription is supposedly good enough for fuzzy search and keyword spotting (I should add a reference here, but I can't find it anymore...); and 0% because it should be reminded that an accuracy of 100% is virtually impossible.&lt;/p&gt;
&lt;p&gt;To complement this, I would like to mention another possible approach to get an interpretable score: during the DH2023 conference, Thibault Clérice and I &lt;a href="https://inria.hal.science/hal-04094241"&gt;presented an experiment&lt;/a&gt; where we trained a model using the same data in the train set and the test set. Our model reached an accuracy close to 90%, which we were able to use as a baseline to define the highest accuracy score possible for the data we had. Thus we were able to consider that a model approaching 90% of accuracy would be an excellent model, as far as that dataset was concerned.&lt;/p&gt;
&lt;p&gt;Still during &lt;a href="https://www.conftool.pro/dh2023/index.php?page=browseSessions&amp;amp;form_session=76#paperID395"&gt;the DH2023 conference&lt;/a&gt;, Wouter Haverals introduced &lt;a href="https://github.com/WHaverals/CERberus"&gt;CERberus 🐶🐶🐶&lt;/a&gt;, a web interface which addresses the same type of issues as &lt;a href="https://huggingface.co/spaces/lterriel/kami-app"&gt;KaMI&lt;/a&gt;: the lack of nuance in a plain CER computation. Indeed, in a CER score, every type of error has the same weight. This means that mistaking an "e" for a "é" costs the same as mistaking a "e" for a "0": in the first case the text is likely still readable or understandable, whereas in the latter, it might not be the case.&lt;/p&gt;
&lt;p&gt;The CER metric is still very useful, but when applied to transcription projects, it is even more valuable when we can filter the types of errors we want to include in the evaluation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;EDIT: I should have noted here that my reflection was focused on the evaluation of an automatic transcription in cases where you already have the expected transcription. When we apply an HTR model to a whole new set of documents, we usually don't have the correct transcription at hand (otherwise we wouldn't use HTR in the first place). This is the reason why many researchers try to find ways to evaluate the quality of the transcription without ground truth. One example can be found in &lt;a href="https://enc.hal.science/hal-03828529"&gt;Clérice (2022)&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, to go back to our initial problem, we can see that there are many ways to draw the line between a good job and a bad one. The threshold will depend on the metric used to express the accuracy of the prediction and also (and actually mostly) on the way the generated text will be used down the line. Even though the software presentation I attended was short, I think we should always remind future users of HTR that 100% of accuracy is not always what they are seeking.&lt;/p&gt;
&lt;p&gt;A short reflection to finish this post: I was bothered by the expression used to qualify the transcription. I am still trying to figure out a way to put it into words. On top of lacking accuracy, the expression "it did a good job" was also calling for a vision of HTR as a magic tool at the service of the searchers and students. But, in which other cases do you say that someone did "a good job?" Likely when you delegate a task to a &lt;a href="https://africanarguments.org/2023/03/the-invisible-labour-of-africa-in-the-digital-revolution/"&gt;subaltern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I see a problem here: in their current state, HTR engines are efficient but not to the point that people can use them without thinking clearly about what they want the engine to produce. It is easy to sell a software pretending that it is a magic servant that will do all the transcription in your place, a tool so smart that you can even consider delegating a part of your responsibility to it. But I think when new users of HTR fail to first reflect on the outcome they can reasonably expect from these engines, it creates disappointment and crappy data and workflows.&lt;/p&gt;</description><category>accuracy</category><category>evaluation</category><category>HTR</category><category>metrics</category><guid>https://alix-tz.github.io/phd/posts/012/</guid><pubDate>Sat, 15 Jul 2023 12:06:20 GMT</pubDate></item><item><title>011 - Working with synthetic data</title><link>https://alix-tz.github.io/phd/posts/011/</link><dc:creator>Alix Chagué</dc:creator><description>&lt;p&gt;What we call synthetic data are data generated artificially, as opposed to data taken from real-life samples. In the case of automatic transcription or layout analysis, it corresponds to creating fake documents or samples of text that look more or less like real ones, in stead of manually annotating existing documents.&lt;/p&gt;
&lt;p&gt;One of the main advantages of using synthetic data rather than real data is the fact that it comes already annotated. For automatic transcription for example, the annotation (transcription) is the same as the string of text passed to a text image generator. If you add to that the fact you can, in theory, generate an unlimited amount of pairs of text image and transcription, it represents an incredible opportunity to accelerate the production of training datasets. An example: &lt;a href="https://ieeexplore.ieee.org/document/8486162"&gt;Doush et al., 2018&lt;/a&gt; use this technique to generate PDF containing contemporary printed Arabic texts. The PDFs are printed, then re-scanned and aligned with the transcription that was used to generate the PDFs. The result is the Yarmouk dataset. As we will see later, generating fake handwritten text is a bit more difficult.&lt;/p&gt;
&lt;p&gt;Another advantage of this technique is that it offers an efficient way around the limitations posed by sensitive or confidential data (&lt;a href="https://doi.org/10.1007/978-3-319-11257-2_15"&gt;Hu et al. 2014&lt;/a&gt;). However, let's note that confidentiality is rarely a problem when it comes to training HTR models on historical documents.&lt;/p&gt;
&lt;p&gt;Generating fake data is not specific to computer vision (&lt;a href="https://www.annualreviews.org/doi/10.1146/annurev-statistics-040720-031848"&gt;Raghunathan, 2021&lt;/a&gt;), even though it is frequently used in this case because data for computer vision tasks are costly to produce. In general, it is a fairly frequent method when machine learning techniques are involved, disregarding the field of application (&lt;a href="https://link.springer.com/article/10.1007/s11263-021-01555-8"&gt;Kataoka et al., 2022&lt;/a&gt;). OCR and HTR tasks are not an exception and we can find traces of such experiments rather early (&lt;a href="https://ieeexplore.ieee.org/document/4669952"&gt;Beusekom et al., 2008&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The first time I was exposed to the notion of synthetic data was during a informal conversation with &lt;a href="https://www.tmonnier.com/"&gt;Tom Monnier&lt;/a&gt; in 2019. At that time, he was working on &lt;a href="https://arxiv.org/abs/2012.08191"&gt;docExtractor&lt;/a&gt;, a layout analysis tool that he trained with images of documents generated artificially.&lt;sup id="fnref:icfhr"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/011/#fn:icfhr"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Then sometimes in 2021, while browsing through &lt;a href="https://huggingface.co/spaces/launch"&gt;HuggingFace's spaces&lt;/a&gt;, I found ntt123's application that simulates &lt;a href="https://huggingface.co/spaces/ntt123/handwriting"&gt;handwriting&lt;/a&gt;. The application takes a text prompt as an input and generates an animation where the letters are traced on the page as if someone was writing them live. It's possible to play with two parameters: a value between 0 and 250 determining the writing style, and a weight determining the likelihood of the traced letters (the lower the weight, the higher the risk of &lt;a href="https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence)"&gt;hallucinated&lt;/a&gt; letters; the higher the weight, the more standardized the tracing). It made me think back to my conversation with Tom Monnier and I wondered if it could be used to generate pairs of text and images.&lt;/p&gt;
&lt;p&gt;At the beginning of the year, I dedicated a good part of my time to testing data generation tools I could find online, to see if they could be used to create a set of fake ground truth that I would use later, in other experiments. I will introduce the latter in a future post, so let's first focus on handwritten data generation.&lt;/p&gt;
&lt;p&gt;When I dug a bit more around ntt123's application, I was confronted with two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;unfortunately, ntt123's application was developed in javascript and not documented at all which made it impossible for me to hack,&lt;/li&gt;
&lt;li&gt;but luckily, it wasn't an original idea: instead it was one of many implementations of a proposition introduced by &lt;a href="http://arxiv.org/abs/1308.0850"&gt;Alex Graves in 2014&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alex Graves uses online&lt;sup id="fnref:online"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/011/#fn:online"&gt;2&lt;/a&gt;&lt;/sup&gt; data from the IAM database (&lt;a href="https://ieeexplore.ieee.org/document/1575685"&gt;Liwicki &amp;amp; Bunke, 2005&lt;/a&gt;) and an &lt;a href="https://en.wikipedia.org/wiki/Long_short-term_memory"&gt;LSTM (Long Short-Term Memory)&lt;/a&gt; to train a model capable of generating series of coordinates that trace letters and words. Initially, the model simply generates random series of letters and words, but it is then improved to take into account a text prompt which forces the models to generate a specific series of letters. As described before, the model also takes a weight (or bias) which normalizes the likelihood of the letters' shape, and can take a "priming line": the image of a handwritten line, whose writing style the model will try to copy. Once the coordinates are generated (including key information such as "ends-of-stroke"), it is easy to place them in an SVG file and visualize the result, with or without animation.&lt;/p&gt;
&lt;p&gt;There are many many implementations of Alex Graves's experiment because it was such an important publication to demonstrate the usefulness of LSTM models. Several can be found on Github if you &lt;a href="https://github.com/search?q=alex%20graves&amp;amp;type=repositories"&gt;search "Alex Graves"&lt;/a&gt;. For my experiment, I didn't want to develop my own adaptation of such a model, but rather to use programs that were ready to be used. This is the reason why I didn't look for papers but instead for recent (or recently updated) repositories on Github. I focused on Python programs because I wanted to be able to understand how they were developed.&lt;/p&gt;
&lt;p&gt;One very promising implementation of Alex Graves' proposition was Evgenii Dolotov's &lt;a href="https://github.com/X-rayLaser/pytorch-handwriting-synthesis-toolkit"&gt;pytorch-handwriting-synthesis-toolkit&lt;/a&gt;. It came with pre-trained models, and a utility scripts to feed the program a text prompt and generate an image. I &lt;a href="https://github.com/alix-tz/pytorch-handwriting-synthesis-toolkit/tree/custom"&gt;customized&lt;/a&gt;&lt;sup id="fnref:customization"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/011/#fn:customization"&gt;3&lt;/a&gt;&lt;/sup&gt; the program a bit to fix a few bugs and try to make it generate several lines maintaining the same handwriting.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alix-tz.github.io/phd/images/PHST_fail_and_success.png" alt="4 lines stating (or supposed to state) 'did a computer write this' generated by Evgenii Dolotov's program. The fourth line is a failed attempt where several letters like y, n, m can be dinstiguished. The fifth line states 'determined to act upon the assumptions' but contains several garbled letters." widht="600px"&gt;&lt;/p&gt;
&lt;p&gt;Even though the generated images were sometimes impressively realistic, it created a lot of bad output. As suggested by Alex Graves, his solution tends to generate what he calls "garbled letters", letters that no human would likely trace. In other cases, it would randomly skip some letters and be completely incapable of tracing some numbers or punctuation signs. Sometimes, the model would simply draw more or less flat lines. Since I wanted to generate fake &lt;em&gt;gold&lt;/em&gt; data that I could trust and since the results were not reliable enough, I played with the bias and the priming lines before trying to train new models using Evgennii Dolotov's utility scripts. I failed to get better results than the pre-trained models, and failed to find the correct parameters to make sure I would obtain always realistic output.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alix-tz.github.io/phd/images/PHST_fail_multiline.png" alt="several flat lines that at one point successfully write 'is fin'. This is a failed generated image." width="100px"&gt;&lt;/p&gt;
&lt;!-- change image to add more examples --&gt;

&lt;p&gt;At this point I started exploring &lt;a href="https://en.wikipedia.org/wiki/Generative_adversarial_network"&gt;GANs (Generative Adversarial Networks)&lt;/a&gt; which are models based on game theory. They are capable of generating realistic fake images learning from samples of real images (see &lt;a href="https://doi.org/10.1145/3422622"&gt;Goodfellow et al., 2020&lt;/a&gt;). They are this kind of models used to generate photos of &lt;a href="https://this-person-does-not-exist.com/en"&gt;people who don't exist&lt;/a&gt;. There are Github repositories offering source code to train such models to generate fake handwriting, such as &lt;a href="https://github.com/omni-us/research-GANwriting"&gt;GANwriting&lt;/a&gt; (described in &lt;a href="http://arxiv.org/abs/2003.02567"&gt;Kang et al., 2020&lt;/a&gt;) or Amazon's &lt;a href="https://github.com/amzn/convolutional-handwriting-gan"&gt;ScrabbleGAN&lt;/a&gt; (introduced in &lt;a href="https://openaccess.thecvf.com/content_CVPR_2020/html/Fogel_ScrabbleGAN_Semi-Supervised_Varying_Length_Handwritten_Text_Generation_CVPR_2020_paper.html"&gt;Fogel et al., 2020&lt;/a&gt;) but they were only giving instructions to reproduce the corresponding papers and train the models ourselves. Since GANs are costly to train, I left this option out for the moment, even though I do think they can become an interesting solution in the future.&lt;/p&gt;
&lt;p&gt;Eventually, I settled for a solution based on a &lt;a href="https://en.wikipedia.org/wiki/Diffusion_model"&gt;Diffusion model&lt;/a&gt;. This type of model can be found behind applications like &lt;a href="https://openai.com/product/dall-e-2"&gt;OpenAI's DALL-E&lt;/a&gt;. Luhman &amp;amp; Luhman (2020), who created the &lt;a href="https://github.com/tcl9876/Diffusion-Handwriting-Generation"&gt;Diffusion Handwriting Generation&lt;/a&gt; (later called DHG), explain very well how diffusion models work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Diffusion probabilistic models [...] convert a known distribution (e.g. Gaussian) into a more complex data distribution. A diffusion process converts the data distribution into a simple distribution by iteratively adding Gaussian noise to the data, and the generative model learns to reverse this diffusion process." (Luhman &amp;amp; Luhman, 2020, p. 1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A great advantage with DHG compared to the LSTM approach was that it was possible to easily fix the priming line and almost always obtain a convincing output. This was essential to create a dataset with a consistent handwriting over hundred of lines. As visible in the following image, even if the diffusion model is not capable of perfectly imitating the handwriting contained in the priming line, it usually successfully captures elements of style such as the slant, or the cursive nature of the text.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alix-tz.github.io/phd/images/DHG_generated.png" alt="five pairs of priming lines with the resulting generated lines." width="800px"&gt;&lt;/p&gt;
&lt;p&gt;After several tests, I found that the third priming line gave the best results when associated with different text prompts, so I decided to use it along with excerpts from &lt;a href="https://www.gutenberg.org/files/2701/2701-0.txt"&gt;Moby Dick&lt;/a&gt; to create a completely artificially generated dataset. In a few days, I created more than 8,000 images (PNG) associated with a text file (TXT) containing the prompts used to generate them.&lt;/p&gt;
&lt;p&gt;These pairs could have been used "as is" to produce a silver synthetic dataset but, like I said before, I needed a gold dataset where the text and the images would be exact matches. Unfortunately, more than a third of the images did not qualify as gold. After manually reviewing about 2,500 of the lines (with the help of my colleague Hugo Scheithauer), we published a set of 1,280 pairs of lines and text under the name "&lt;a href="https://github.com/alix-tz/spinnerbait"&gt;Spinnerbait&lt;/a&gt;".&lt;/p&gt;
&lt;p&gt;Even though I was able to produce a dataset meeting my main criteria, I was actually disappointed with my results: I wanted a sort of magic button which would allow me to generate, at any time and without having to review it, a perfect set of training data. Instead, in the future, if I want to add more lines to Spinnerbait, I will have to spend a few hours going through each line to filter the bad ones out.&lt;/p&gt;
&lt;p&gt;On the other hand, I decided to take a few hours to manually copy a text taken from Guillaume Apollinaire's poems. I copied the text following a txt file that I would edit every time I would start a new line, I scanned it, segmented it with eScriptorium before copying and pasting the lines from the txt file and exported the result as a series of XML ALTO and images. It gave birth to the &lt;a href="https://github.com/alix-tz/moonshines"&gt;Moonshines&lt;/a&gt; dataset, a set of 1,186 lines (including 170 dedicated to a fixed test subset) of a single hand, thus comparable in size to Spinnerbaits.&lt;/p&gt;
&lt;p&gt;I think generating both datasets took about the same amount of time, if I take into account on the one hand reviewing the generated lines and on the other hand copying the text and passing it through eScriptorium. Moonshines used less computing resources and produced a richer dataset if we consider the aspect of the text. Also, the length of the lines is more varied in Moonshines whereas it is more homogenous (max 5 words) in Spinnerbait, because the generator tended to make more errors on longer prompts.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alix-tz.github.io/phd/images/spinnerbait_moonshines.png" alt="a line taken from the Spinnerbait dataset and a line taken from the Moonshines dataset" widht="600px"&gt;&lt;/p&gt;
&lt;p&gt;Another important limitation that I have barely addressed at this point it that not only do these tools fail to draw non-ASCII characters, but they also tend to have a greater chance of producing garbled letters when prompted with rare or non-english words&lt;sup id="fnref:iam"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/011/#fn:iam"&gt;4&lt;/a&gt;&lt;/sup&gt;. This is true of all the systems I have tested. Of course, we could imagine training new models on data containing a greater diversity of languages, or simply other scripts or languages.&lt;/p&gt;
&lt;p&gt;As way of a conclusion, I would say that even though I was disappointed with what I obtained down the line, this exploratory adventure was very interesting. I learned a lot and I am convinced that if I had more time and resources (and if it were more crucial for me), I would have found a way to get better results. I know of some coming publications that used GANs to create artificial data that look like lines taken from historical documents and I really look forward reading them.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:icfhr"&gt;
&lt;p&gt;It is possible to find &lt;a href="https://youtu.be/Tuw8uQonW7E?t=145"&gt;here&lt;/a&gt; a recording of the talk given on this tool at ICFHR 2020. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/011/#fnref:icfhr" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:online"&gt;
&lt;p&gt;In the context of handwritten text recognition, a distinction is made between "online" data and "offline" data. Offline data are based on a matrix of pixels containing the image of a text (they are static), whereas online data are vectors containing information about the speed, the points through which a line passes to form a letter, end of stroke points, etc. Online HTR uses data generated with an e-pen and a screen while offline HTR uses images created with a scanner or a camera. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/011/#fnref:online" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:customization"&gt;
&lt;p&gt;One of the customizations consisted in removing non-ASCII characters or characters not supported by the model. It was easy to apply this transformation because in pytorch-handwriting-synthesis-toolkit, each model comes with a little metadata file which contains the character set handled by the model. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/011/#fnref:customization" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:iam"&gt;
&lt;p&gt;All the models were trained using the IAM database, more often the "online" database, but sometimes also with the "offline" version. &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/011/#fnref:iam" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>experiment</category><category>HTR</category><category>synthetic data</category><guid>https://alix-tz.github.io/phd/posts/011/</guid><pubDate>Sun, 21 May 2023 18:12:26 GMT</pubDate></item><item><title>010 - Make and Read the docs</title><link>https://alix-tz.github.io/phd/posts/010/</link><dc:creator>Alix Chagué</dc:creator><description>&lt;p&gt;During my last contract as a research engineer at Inria, I spent a lot of my time working on the project called &lt;a href="https://lectaurep.hypotheses.org/"&gt;LECTAUREP&lt;/a&gt;, in collaboration with the &lt;a href="https://www.archives-nationales.culture.gouv.fr/"&gt;National Archives in France&lt;/a&gt;. The goal of this project was to explore new ways to index the content of thousands of thousands of notary registries which, put together, form &lt;a href="https://www.siv.archives-nationales.culture.gouv.fr/siv/cms/content/fonds.action?uuid=12b&amp;amp;template=pog/pogLevel2&amp;amp;preview=false"&gt;one of the most used collections&lt;/a&gt; of the National Archives. I joined the project at the end of 2019, during its second phase, almost at the same time as &lt;a href="https://gitlab.com/scripta/escriptorium"&gt;eScriptorium&lt;/a&gt; was initiated. LECTAUREP had worked with &lt;a href="https://readcoop.eu/transkribus/?sc=Transkribus"&gt;Transkribus&lt;/a&gt; during the first phase (in 2018) but, given the connections between &lt;a href="http://almanach.inria.fr/index-en.html"&gt;my research team&lt;/a&gt; and the team behind eScriptorium, we quickly switched to the newer software and contributed to its development.  &lt;/p&gt;
&lt;p&gt;One of my most important contribution is the redaction of &lt;a href="https://lectaurep.hypotheses.org/documentation/prendre-en-main-escriptorium"&gt;a tutorial for the software&lt;/a&gt;, which was initially only intended as an internal resource for our team of annotators. This is the reason why the tutorial was published on LECTAUREP's blog. &lt;a href="https://openiti.org/"&gt;OpenITI&lt;/a&gt;, and in particular &lt;a href="https://twitter.com/Mar_Musa"&gt;Jonathan Allen&lt;/a&gt; rapidly offered &lt;a href="https://lectaurep.hypotheses.org/documentation/escriptorium-tutorial-en"&gt;an English translation&lt;/a&gt; which, eventually, was also published on LECTAUREP's blog. Since the publication of this translation, it is listed on eScriptorium's home page as its official tutorial.  &lt;/p&gt;
&lt;p&gt;Unfortunately, the tutorial hasn't been updated in a long time whereas major updates and new features have been added on eScriptorium's side.  &lt;/p&gt;
&lt;p&gt;LECTAUREP's blog is not a good solution. It is built with &lt;a href="https://wordpress.com/"&gt;Wordpress&lt;/a&gt; and hosted by &lt;a href="https://hypotheses.org/"&gt;Hypotheses&lt;/a&gt; which is very convenient to allow a small, well defined, group of people to collaboratively work on a research blog, but it's too heavy and not adapted to publish the documentation of a software like eScriptorium. The documentation needs to be updated frequently to keep up with the software and, in general, a blog is not a place to publish the extensive documentation of a software. To top it all, it is not even that easy to update for me, so can you imagine someone outside of LECTAUREP trying to offer an update?  &lt;/p&gt;
&lt;p&gt;I have been thinking of finding a better solution since at least 2020, but it was never so urgent that I was able to put it at the top of my to-do lists. Last Summer, I took the advantage of a rather slow couple of weeks in August, when every one but me seemed to have gone on vacations, to put something different in place.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://readthedocs.org/"&gt;Readthedocs&lt;/a&gt; quickly appeared to me as an ideal solution: the platform is designed for publishing software documentations, it handles software versions and multi-lingual contents. Last but not least, it uses static website generators. This is fundamental because it allows for the publication of the source code on a platforms like &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; and will actually use this public source code to build the website.  &lt;/p&gt;
&lt;p&gt;Github is a platform designed for sharing and opening codes to external contributors. Relying on it solves a major issue with the current tutorial: if anyone can suggest the correction, edition or translation of eScriptorium's documentation, then it is more likely to keep up with the evolutions of the application!  &lt;/p&gt;
&lt;p&gt;In August, I created a new Github repository called &lt;a href="https://github.com/alix-tz/escriptorium-documentation"&gt;escriptorium-documentation&lt;/a&gt;. I &lt;a href="https://docs.readthedocs.io/en/stable/tutorial/#getting-started"&gt;set a basic configuration and connected it to Readthedocs&lt;/a&gt;. As soon as this was done, the website became available at &lt;a href="https://escriptorium.readthedocs.io/"&gt;online&lt;/a&gt; with a URL based on the following structure: &lt;code&gt;{gh_repo_name}.readthedocs.io&lt;/code&gt;. Then, I started rewriting the content of the tutorial... following &lt;a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html"&gt;Sphinx' syntax&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;It was so painful that I never got back to it after I came back from my own vacations.  &lt;/p&gt;
&lt;p&gt;Why painful? Well, I had discovered Markdown in 2017 and I have used it since. It's so powerful and yet so light! In comparison, Sphinx felt like such a complicated and heavy syntax. Not as heavy as HTML, but less intuitive nonetheless. I had to go through the documentation every time I wanted to add something as simple as a hyperlink or an image!  &lt;/p&gt;
&lt;p&gt;In January, when I gathered enough motivation&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/010/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; to go back to working on eScriptorium's tutorial, I decided to look for an alternative to &lt;a href="https://www.sphinx-doc.org/en/master/usage/builders/index.html#sphinx.builders.html.DirectoryHTMLBuilder"&gt;Sphinx compilers&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The only non-sphinx-based option available with readthedocs is &lt;a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-mkdocs.html"&gt;Mkdocs&lt;/a&gt;. Like its name hints at, &lt;a href="https://www.mkdocs.org/"&gt;Mkdocs&lt;/a&gt; is a Markdown compiler, capable to quickly build websites. The set-up is really quick, it's well documented, fairly easy to customize and it's possible to add a lot of &lt;a href="https://squidfunk.github.io/mkdocs-material/setup/extensions/python-markdown-extensions/#emoji"&gt;cool extensions which are based on Python&lt;/a&gt;. It was the bomb!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I liked Mkdocs so much that I also used it to rebuild &lt;a href="https://alix-tz.github.io/"&gt;my personal website&lt;/a&gt;!&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/010/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over the past month, I have spent a lot of time working on this new tutorial for eScriptorium. I designed a basic structure, breaking down the features into different categories. Now the pages are progressively being filled and I am very happy to have been joined in my efforts by my colleagues Hugo Scheithauer and Floriane Chiffoleau. As we progressively merge the content of new pages to the main branch, the &lt;a href="https://escriptorium.readthedocs.io/en/latest/"&gt;escriptorium-tutorial&lt;/a&gt; website expands. It will be ready soon for an official release!  &lt;/p&gt;
&lt;p&gt;I really hope that the transparency and simplicity brought by Mkdocs and Markdown will allow many people to add their contributions to the documentation of eScriptorium! Who knows, maybe you will too!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;EDIT: we changed the name of the repository to escriptorium-documentation instead of escriptorium-tutorial (all links and mentions were changed in this post). The decision was motivated by the fact the "tutorial" felt like an inexact description of the actual scope/ambition of the project.&lt;/em&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Also when I got more free time after &lt;a href="https://alix-tz.github.io/phd/posts/009/"&gt;my classes were over&lt;/a&gt;! &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/010/#fnref:1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;It is not necessary to use readthedocs to deploy a website built with Mkdocs. In the case of the tutorial, it simply allows us to have a domain name more meaningful than ".github.io". &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/010/#fnref:2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>eScriptorium</category><category>house cleaning</category><category>HTR</category><category>software documentation</category><category>static website</category><guid>https://alix-tz.github.io/phd/posts/010/</guid><pubDate>Tue, 28 Feb 2023 10:41:40 GMT</pubDate></item><item><title>007 - WikiCREMMA</title><link>https://alix-tz.github.io/phd/posts/007/</link><dc:creator>Alix Chagué</dc:creator><description>&lt;p&gt;"WikiCREMMA" (or CREMMA-Wiki, or CREMMA-Wikipedia) is (are?) the name(s) Thibault Clérice and I gave to a dataset created within the perimeter of the CREMMA funding. In 2022, we were able to use this funding to hire several students from the &lt;a href="https://www.chartes.psl.eu/"&gt;École nationale des chartes&lt;/a&gt; to produce entirely new transcriptions of documents from various periods (from Medieval times to 21st century), as well as to align already existing transcriptions with the corresponding images. We will hopefully have occasions to present this experiment further in the months to come, but today I would like to talk about the specific case of WikiCREMMA.  &lt;/p&gt;
&lt;p&gt;Unlike the other CREMMA datasets&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://alix-tz.github.io/phd/posts/007/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, WikiCREMMA also consisted of creating new images. Using exerpts from &lt;a href="https://github.com/PonteIneptique/wikicremma"&gt;randomly selected&lt;/a&gt; Wikipedia articles (in French), we created forms which were then printed before we asked volunteers to copy the text by hand using the tools of their choice, thus collecting examples of nowadays handwritings.  &lt;/p&gt;
&lt;p&gt;The form is mostly composed with the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;explanations regarding the context of the experiment,&lt;/li&gt;
&lt;li&gt;instructions on how to fill the form,&lt;/li&gt;
&lt;li&gt;a short section where contributors can add their names, their writing hand (left or right) and their gender,&lt;/li&gt;
&lt;li&gt;the extract to copy,&lt;/li&gt;
&lt;li&gt;and a blank space where contributors ought to be writing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each form offers a different short text to copy: it is thus possible for volunteers to contribute many forms. The exerpts were collected by sending requests to the "&lt;a href="https://fr.wikipedia.org/wiki/Sp%C3%A9cial:Page_au_hasard"&gt;Page au hasard&lt;/a&gt;" feature available in Wikipedia (in English, see "&lt;a href="https://en.wikipedia.org/wiki/Special:Random"&gt;random article&lt;/a&gt;").  &lt;/p&gt;
&lt;p&gt;Once the forms were filled, we automatically &lt;a href="https://github.com/alix-tz/cremmawiki-anonymizer"&gt;anonymized them&lt;/a&gt; and then uploaded them on eScriptorium. This anonymization mostly meant adding a big black rectangle over the part of the page where contributors are invited to give us details about who they are. Once in eScriptorium, the images are segmented (aka lines of text are detected on the image) and then transcribed. We ignore all the printed text and only focus on the handwritten elements.  &lt;/p&gt;
&lt;p&gt;Since we asked volunteers to copy a text, it is impossible to avoid crossed out words, blanks or mispellings. Therefore, even if we possess the original text, we did not automatize the transcription. This manual transcription takes time but it allows us to respect what was actually written by a volunteer. On the other hand, having access to the text they were asked to copy allows us to read them very quickly and to lift any doubt regarding what we should be reading!&lt;/p&gt;
&lt;p&gt;We created several batches of forms in order to test out the success (or failure) of our project. They don't always have the same size: Batch-01 contains 10 images whereas Batch-04 has 96 of them. Initially, we imagined leaving stacks of these forms in different spots, giving volunters the possibility to send us their form after they filled it. However, even if we dream big, it seemed safer to start with asking people around us. I've asked friends, colleagues, classmates, but also very random people to participate in this experiment -- maybe you, reader, also contributed! Overall, as far as I am concerned, this has been a lot of fun! &lt;/p&gt;
&lt;p&gt;As of Fall 2022, more than 135 people took part in the experiment and we collected more than 300 pages. Not everything was transcribed yet, but we were already able to publish 242 images along with their transcription in the &lt;a href="https://github.com/HTR-United/cremma-wikipedia"&gt;CREMMA-WIKIPEDIA&lt;/a&gt; repository. It adds up to a total of 1331 lines and 64691 characters for contemporary handwritings in French. &lt;/p&gt;
&lt;p&gt;On top of the images and the transcription, I proposed to add a series of metadata. They would allow potential users of the dataset to sort the files according to several criterias. They include the writing hand, the color of the ink or else the type of tool used to write (pencil/marker/ink pen/etc).&lt;/p&gt;
&lt;p&gt;We were already able to use part of this dataset since it was included in the TrainSet of &lt;a href="https://zenodo.org/record/6657809#.Y1BEtEyZOuU"&gt;Manu McFrench&lt;/a&gt;, an HTR model for modern and contemporary French!&lt;/p&gt;
&lt;p&gt;I have lots of ideas for future usages and developments for this dataset so it will be back in other posts of this blog!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;They can all be found via the &lt;a href="https://htr-united.github.io/catalog.html"&gt;HTR-United catalog!&lt;/a&gt; &lt;a class="footnote-backref" href="https://alix-tz.github.io/phd/posts/007/#fnref:1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>experiment</category><category>HTR</category><category>wikicremma</category><guid>https://alix-tz.github.io/phd/posts/007/</guid><pubDate>Wed, 19 Oct 2022 18:49:00 GMT</pubDate></item></channel></rss>